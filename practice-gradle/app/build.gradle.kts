import com.github.spotbugs.snom.SpotBugsTask

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("com.diffplug.spotless") version "7.0.3"
    jacoco
    id("com.github.spotbugs") version "6.1.10"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

spotless{
    java {
        googleJavaFormat("1.20.0")
            .aosp()
        target("src/**/*.java")

        importOrder("java|javax", "org", "com.mycorp", "", "\\#")
        removeUnusedImports()

        trimTrailingWhitespace()
        endWithNewline()
    }
}

jacoco {
    toolVersion = "0.8.13"
}

spotbugs {
    toolVersion.set("4.9.3")
    effort.set(com.github.spotbugs.snom.Effort.MAX)
    reportLevel.set(com.github.spotbugs.snom.Confidence.MEDIUM)
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
    testImplementation("org.assertj:assertj-core:3.27.3")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        html.required.set(true)
        xml.required.set(true)
    }
}

tasks.named<SpotBugsTask>("spotbugsMain") {

    // 필요 시 커스텀 클래스 경로 지정
    // classes.setFrom(sourceSets.main.get().output)

    reports.apply {
        /* HTML */
        create("html") {
            required.set(true)
            outputLocation.set(
                layout.buildDirectory.file("reports/spotbugs/${name}.html")
            )
            setStylesheet("fancy-hist.xsl")
        }

        /* XML — SonarQube, CI 파싱용 */
        create("xml") {
            required.set(true)
        }

        /* SARIF — GitHub Code Scanning 용 (필요 없으면 true→false) */
        create("sarif") {
            required.set(false)
        }
    }
}

tasks.check { dependsOn("spotbugsMain") }